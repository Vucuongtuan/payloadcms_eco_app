/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    categories: Category;
    subcategories: Subcategory;
    products: Product;
    tags: Tag;
    brands: Brand;
    orders: Order;
    reviews: Review;
    'product-variants': ProductVariant;
    newsletter: Newsletter;
    'email-subscribe': EmailSubscribe;
    pages: Page;
    posts: Post;
    search: Search;
    'payload-folders': FolderInterface;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    'payload-folders': {
      documentsAndFolders: 'payload-folders' | 'media' | 'categories' | 'subcategories' | 'products' | 'pages';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    subcategories: SubcategoriesSelect<false> | SubcategoriesSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    brands: BrandsSelect<false> | BrandsSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    'product-variants': ProductVariantsSelect<false> | ProductVariantsSelect<true>;
    newsletter: NewsletterSelect<false> | NewsletterSelect<true>;
    'email-subscribe': EmailSubscribeSelect<false> | EmailSubscribeSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-folders': PayloadFoldersSelect<false> | PayloadFoldersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    menu: Menu;
  };
  globalsSelect: {
    menu: MenuSelect<false> | MenuSelect<true>;
  };
  locale: 'vi' | 'en';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  role?: ('admin' | 'editor' | 'user')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  folder?: (number | null) | FolderInterface;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders".
 */
export interface FolderInterface {
  id: number;
  name: string;
  folder?: (number | null) | FolderInterface;
  documentsAndFolders?: {
    docs?: (
      | {
          relationTo?: 'payload-folders';
          value: number | FolderInterface;
        }
      | {
          relationTo?: 'media';
          value: number | Media;
        }
      | {
          relationTo?: 'categories';
          value: number | Category;
        }
      | {
          relationTo?: 'subcategories';
          value: number | Subcategory;
        }
      | {
          relationTo?: 'products';
          value: number | Product;
        }
      | {
          relationTo?: 'pages';
          value: number | Page;
        }
    )[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  folderType?: ('media' | 'categories' | 'subcategories' | 'products' | 'pages')[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  description?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  folder?: (number | null) | FolderInterface;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subcategories".
 */
export interface Subcategory {
  id: number;
  title: string;
  description?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  category: number | Category;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  folder?: (number | null) | FolderInterface;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: number;
  productType?: ('simple' | 'variable') | null;
  views?: number | null;
  sales?: number | null;
  title: string;
  description?: string | null;
  layout?:
    | {
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'richText';
      }[]
    | null;
  specifications?:
    | {
        key: string;
        value: string;
        id?: string | null;
        blockName?: string | null;
        blockType: 'specItem';
      }[]
    | null;
  gallery?:
    | {
        image: number | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  status?: ('draft' | 'published' | 'out-of-stock' | 'archived') | null;
  slug?: string | null;
  slugLock?: boolean | null;
  image: number | Media;
  taxonomies: {
    brands?: (number | Brand)[] | null;
    category: number | Category;
    subCategory?: (number | Subcategory)[] | null;
    tags?: (number | Tag)[] | null;
  };
  /**
   * Enter the price in VND only, other currencies will be automatically converted based on the exchange rates defined in GlobalSetting.
   */
  pricing?: {
    price: number;
    discount: number;
    total: string;
  };
  inventory?: {
    sku?: string | null;
    stock?: number | null;
  };
  variants?: (number | ProductVariant)[] | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  folder?: (number | null) | FolderInterface;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands".
 */
export interface Brand {
  id: number;
  title: string;
  description?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  location?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  title: string;
  description?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-variants".
 */
export interface ProductVariant {
  id: number;
  /**
   * Ví dụ: 'Màu Đỏ / Layout 100%' hoặc 'Bản 256GB màu Titan'
   */
  name: string;
  product: number | Product;
  status?: ('draft' | 'published' | 'out-of-stock' | 'archived') | null;
  price: number;
  options?:
    | {
        /**
         * Ví dụ: 'Màu sắc', 'Dung lượng', 'Layout'
         */
        option: string;
        /**
         * Ví dụ: 'Đỏ', '256GB', '100%'
         */
        value: string;
        id?: string | null;
      }[]
    | null;
  inventory?: {
    sku?: string | null;
    stock?: number | null;
  };
  gallery?:
    | {
        image: number | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  description?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  blocks?: AnnouncementBar[] | null;
  folder?: (number | null) | FolderInterface;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Announcement Bar".
 */
export interface AnnouncementBar {
  options?: ('announcement' | 'static') | null;
  backgroundColor?: string | null;
  title?: string | null;
  content?:
    | {
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'announcementBar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: number;
  user: number | User;
  items?:
    | {
        product: number | Product;
        variant?: (number | null) | ProductVariant;
        quantity: number;
        /**
         * Giá của sản phẩm tại thời điểm đặt hàng.
         */
        price?: number | null;
        id?: string | null;
      }[]
    | null;
  total: number;
  status?: ('pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled') | null;
  shippingAddress: {
    fullName: string;
    phone: string;
    address: string;
    city: string;
    country: string;
  };
  paymentMethod?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: number;
  user: number | User;
  product: number | Product;
  rating: number;
  comment?: string | null;
  approved?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter".
 */
export interface Newsletter {
  id: number;
  listEmail?: (number | null) | EmailSubscribe;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-subscribe".
 */
export interface EmailSubscribe {
  id: number;
  email: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  image: number | Media;
  linkedProducts?:
    | (
        | {
            relationTo: 'products';
            value: number | Product;
          }
        | {
            relationTo: 'brands';
            value: number | Brand;
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc:
    | {
        relationTo: 'categories';
        value: number | Category;
      }
    | {
        relationTo: 'subcategories';
        value: number | Subcategory;
      }
    | {
        relationTo: 'products';
        value: number | Product;
      }
    | {
        relationTo: 'brands';
        value: number | Brand;
      }
    | {
        relationTo: 'posts';
        value: number | Post;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'subcategories';
        value: number | Subcategory;
      } | null)
    | ({
        relationTo: 'products';
        value: number | Product;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'brands';
        value: number | Brand;
      } | null)
    | ({
        relationTo: 'orders';
        value: number | Order;
      } | null)
    | ({
        relationTo: 'reviews';
        value: number | Review;
      } | null)
    | ({
        relationTo: 'product-variants';
        value: number | ProductVariant;
      } | null)
    | ({
        relationTo: 'newsletter';
        value: number | Newsletter;
      } | null)
    | ({
        relationTo: 'email-subscribe';
        value: number | EmailSubscribe;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-folders';
        value: number | FolderInterface;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  folder?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  slugLock?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  folder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subcategories_select".
 */
export interface SubcategoriesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  slugLock?: T;
  category?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  folder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  productType?: T;
  views?: T;
  sales?: T;
  title?: T;
  description?: T;
  layout?:
    | T
    | {
        richText?:
          | T
          | {
              content?: T;
              id?: T;
              blockName?: T;
            };
      };
  specifications?:
    | T
    | {
        specItem?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
              blockName?: T;
            };
      };
  gallery?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  status?: T;
  slug?: T;
  slugLock?: T;
  image?: T;
  taxonomies?:
    | T
    | {
        brands?: T;
        category?: T;
        subCategory?: T;
        tags?: T;
      };
  pricing?:
    | T
    | {
        price?: T;
        discount?: T;
        total?: T;
      };
  inventory?:
    | T
    | {
        sku?: T;
        stock?: T;
      };
  variants?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  folder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands_select".
 */
export interface BrandsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  slugLock?: T;
  location?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  user?: T;
  items?:
    | T
    | {
        product?: T;
        variant?: T;
        quantity?: T;
        price?: T;
        id?: T;
      };
  total?: T;
  status?: T;
  shippingAddress?:
    | T
    | {
        fullName?: T;
        phone?: T;
        address?: T;
        city?: T;
        country?: T;
      };
  paymentMethod?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  user?: T;
  product?: T;
  rating?: T;
  comment?: T;
  approved?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-variants_select".
 */
export interface ProductVariantsSelect<T extends boolean = true> {
  name?: T;
  product?: T;
  status?: T;
  price?: T;
  options?:
    | T
    | {
        option?: T;
        value?: T;
        id?: T;
      };
  inventory?:
    | T
    | {
        sku?: T;
        stock?: T;
      };
  gallery?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter_select".
 */
export interface NewsletterSelect<T extends boolean = true> {
  listEmail?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-subscribe_select".
 */
export interface EmailSubscribeSelect<T extends boolean = true> {
  email?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  slugLock?: T;
  blocks?:
    | T
    | {
        announcementBar?: T | AnnouncementBarSelect<T>;
      };
  folder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Announcement Bar_select".
 */
export interface AnnouncementBarSelect {
  options?: boolean;
  backgroundColor?: boolean;
  title?: boolean;
  content?:
    | boolean
    | {
        title?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  content?: T;
  image?: T;
  linkedProducts?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders_select".
 */
export interface PayloadFoldersSelect<T extends boolean = true> {
  name?: T;
  folder?: T;
  documentsAndFolders?: T;
  folderType?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu".
 */
export interface Menu {
  id: number;
  header?: {
    logo?: (number | null) | Media;
    navItems?:
      | {
          /**
           * Choose whether this is an internal or external link
           */
          checkTypeLink?: ('internal' | 'external') | null;
          /**
           * Check if this item opens the document in a new window or tab
           */
          isblank?: boolean | null;
          /**
           * Enter the external URL to link to
           */
          link?: string | null;
          /**
           * Select an internal page or product to link to
           */
          localLink?: (number | null) | Page;
          /**
           * Add nested navigation items
           */
          children?:
            | {
                /**
                 * Choose whether this is an internal or external link
                 */
                checkTypeLink?: ('internal' | 'external') | null;
                /**
                 * Check if this item opens the document in a new window or tab
                 */
                isblank?: boolean | null;
                /**
                 * Enter the external URL to link to
                 */
                link?: string | null;
                /**
                 * Select an internal page or product to link to
                 */
                localLink?: (number | null) | Page;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  footer?: {
    logo?: (number | null) | Media;
    navItems?:
      | {
          /**
           * Choose whether this is an internal or external link
           */
          checkTypeLink?: ('internal' | 'external') | null;
          /**
           * Check if this item opens the document in a new window or tab
           */
          isblank?: boolean | null;
          /**
           * Enter the external URL to link to
           */
          link?: string | null;
          /**
           * Select an internal page or product to link to
           */
          localLink?: (number | null) | Page;
          /**
           * Add nested navigation items
           */
          children?:
            | {
                /**
                 * Choose whether this is an internal or external link
                 */
                checkTypeLink?: ('internal' | 'external') | null;
                /**
                 * Check if this item opens the document in a new window or tab
                 */
                isblank?: boolean | null;
                /**
                 * Enter the external URL to link to
                 */
                link?: string | null;
                /**
                 * Select an internal page or product to link to
                 */
                localLink?: (number | null) | Page;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu_select".
 */
export interface MenuSelect<T extends boolean = true> {
  header?:
    | T
    | {
        logo?: T;
        navItems?:
          | T
          | {
              checkTypeLink?: T;
              isblank?: T;
              link?: T;
              localLink?: T;
              children?:
                | T
                | {
                    checkTypeLink?: T;
                    isblank?: T;
                    link?: T;
                    localLink?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  footer?:
    | T
    | {
        logo?: T;
        navItems?:
          | T
          | {
              checkTypeLink?: T;
              isblank?: T;
              link?: T;
              localLink?: T;
              children?:
                | T
                | {
                    checkTypeLink?: T;
                    isblank?: T;
                    link?: T;
                    localLink?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}